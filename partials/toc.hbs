{{!-- Toc UI --}}
<div class="post-toc js-post-toc {{#if sidebar}}is-aside{{else}}is-floating{{/if}}"> 
  <div class="post-toc__header flex items-center">
    <span class="m-r flex-1">{{t "Table of Contents"}}</span>
    <button class="post-toc__toggle js-toc-toggle">
      {{> icon name="list" size="sm"}}
    </button>
  </div>
  <div class="post-toc__content js-toc"></div>
</div>

{{!-- Toc Script --}}
{{#contentFor "scripts"}}
  <script>
    document.addEventListener('readystatechange', function(event) {
      if (document.readyState === "complete") {
        // table of contents toggle
        const tocToggleBtn = document.querySelector('.js-toc-toggle');
        const postToc = document.querySelector('.js-post-toc');

        // media query for TOC function
        const mqSmall = window.matchMedia('(max-width: 767px)');
        const mqLarge = window.matchMedia('(min-width: 768px)');

        if (tocToggleBtn && postToc) {
          // if device is large, show the TOC by default
          if (mqLarge.matches) postToc.classList.add('is-active');

          // open/close the TOC
          tocToggleBtn.onclick = function(event) {
            postToc.classList.toggle('is-active');
          }
        }

        // get header height as threshold
        const headerHeight = parseInt(getComputedStyle(document.documentElement)
                        .getPropertyValue('--global-header-height'));
        const headerStyle = document.querySelector('.js-header').getAttribute('data-header');
        let headerOffset = headerStyle === 'normal' ? 20 : headerHeight + 20;

        if (postToc) {
          tocbot.init({
            // Where to render the table of contents.
            tocSelector: '.js-toc',
            // Where to grab the headings to build the table of contents.
            contentSelector: '.content',
            // Which headings to grab inside of the contentSelector element.
            headingSelector: 'h1, h2, h3, h4',
            // Ignore some headings (like header card and toggle card)
            ignoreSelector: '[class*="kg-"],[class*="content-cta"]',
            // For headings inside relative or absolute positioned containers within content.
            hasInnerContainers: false,
            // smooth scroll
            scrollSmooth: false,
            // offset
            headingsOffset: headerOffset,
            // onclick event
            onClick: function(e){ 
              e.preventDefault();
              const href = this.getAttribute('href');
              if (href) {
                const el = document.querySelector(`#${CSS.escape(href.substring(1))}`);
                let offset;
                const bodyRect = document.body.getBoundingClientRect().top;
                const elementRect = el.getBoundingClientRect().top;
                const elementPosition = elementRect - bodyRect;
                offset = headerOffset; 
                themeGlobal.scrollPos = elementPosition;
                const offsetPosition = elementPosition - offset;

                window.scrollTo({
                  top: offsetPosition,
                  behavior: 'smooth'
                });
              }

              // if on small screen close the TOC when clicking on item
              if (mqSmall.matches) postToc.classList.remove('is-active');
            }
          });

          document.querySelector('.js-toc .toc-list') ? postToc.classList.add('is-rendered') : null;
        }
      }
    });
  </script>
{{/contentFor}}